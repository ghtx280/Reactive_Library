let Rem_Data,Rem_Watches=[];const Rem_Store={},Rem_Store_For={},RemJs={data(a){return Rem_Data=new Proxy(a,{get(b,c){return Reflect.get(b,c)},set(c,d,a){let b=c[d];c[d]=a,Rem_Watches.forEach(c=>{(d===c.var||!0===c.var)&&c.func(b,a)}),Rem_Update(d,b,a,d)}}),Rem_Data},watch(c,a){Rem_Watches.push({var:c,func:a})},mounted(a){addEventListener("DOMContentLoaded",a)}};function Rem_js(a){if(!((c,a)=>!!c.split(",").filter(b=>a.includes(b)).length)("do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments,typeof,void",a+""))return Object.keys(Rem_Data).forEach(b=>{a.includes(b)&&!a.includes("Rem_Data."+b)&&(a=a.replaceAll(b,"Rem_Data."+b))}),new Function(`return ${a}`)()}function Rem_parseAttr(h){const b=[],i=(c,d)=>b.push({prop:c,value:d}),d=b=>b.slice(0,b.indexOf(":")).trim(),e=b=>b.slice(b.indexOf(":")+1).trim(),c=b=>d(b?b:h).split("&").forEach(c=>{i(c.trim(),e(b?b:h))});return h.includes(";")?h.split(";").forEach(b=>b.includes("&")?c(b):i(d(b),e(b))):h.includes("&")?c():i(d(h),e(h)),b}function Rem_Update(a,b){Rem_Store[a]?.forEach(c=>{if(c.bind)for(const d of Rem_parseAttr(c.bind))"class"==d.prop&&(d.prop="className"),"text"==d.prop&&(d.prop="innerText"),"this"==d.prop?Rem_Data[d.value]!=c.el&&(Rem_Data[d.value]=c.el):"className"==d.prop?void 0===b?(console.log(Rem_js(d.value)),!c.el.className.includes(Rem_js(d.value))&&(c.el.className+=" "+Rem_js(d.value))):(b="string"==typeof b?`"${b}"`:b,c.el.classList.remove(Rem_js(d.value.replaceAll(a,b))),c.el.classList.add(Rem_js(d.value))):"innerText"==d.prop?Rem_Data[d.value]!=c.el[d.prop]&&(Rem_Data[d.value]=c.el[d.prop]):c.el[d.prop]=Rem_js(d.value);if(c.if&&(Rem_js(c.if)?c.el.append(...c.html):c.el.innerHTML=""),c.css)for(const a of Rem_parseAttr(c.css))c.el.style[a.prop]=Rem_js(a.value);if(c.each)for(const a in c.el.innerHTML="",Rem_Data[c.each]){let b=createElement(c.html)[0]?.cloneNode(!0);if(!b)break;let e=b.innerHTML.replaceAll('$$',`${c.each}[${a}]`),f=e,g=e.match(/\{([^}]+)\}/g),h=g?.map(b=>b.slice(1,b.length-1).trim());for(let a in h)e=e.replaceAll(g[a],Rem_js(h[a]));b.removeAttribute("in"),b.innerHTML=e,c.el.append(b),setStore(b,"in",f,a)}if(c.in){let a=c.in,b=a.match(/\{([^}]+)\}/g),e=b.map(b=>b.slice(1,b.length-1).trim());for(let d in b)a=a.replaceAll(b[d],Rem_js(e[d]));c.el.innerHTML=a}})}function createElement(a){var b=document.createElement("div");return b.innerHTML=a,b.childNodes}function setStore(a,b,c,d){if("in"===b){let e=c||a.innerText,f=e.match(/\{([^}]+)\}/g)?.map(b=>b.slice(1,b.length-1).trim());for(const c in Rem_Store)if(f?.filter(a=>a.includes(c)).length)if(d){let f=Rem_Store[c].filter(a=>a.k==d);f.length?f[0].el=a:Rem_Store[c].push({el:a,[b]:e,k:d})}else Rem_Store[c].push({el:a,[b]:e})}else for(const c in Rem_Store)if(a.getAttribute(b).includes(c)){let d={};"if"===b&&(d.html=Array.from(a.children)),"each"===b&&(d.html=a.innerHTML.trim(),a.innerHTML=""),d[b]=a.getAttribute(b),d.el=a,Rem_Store[c].push(d)}}document.addEventListener("DOMContentLoaded",()=>{if(Rem_Data)for(const a of Object.keys(Rem_Data))"function"!=typeof Rem_Data[a]&&(Rem_Store[a]=[]);const a="on,in,if,bind,css".split(",").map(a=>`[${a}]`).join();for(const a of document.querySelectorAll("[each]"))setStore(a,"each"),a.removeAttribute("each");for(const a of document.querySelectorAll("[in]"))setStore(a,"in"),a.removeAttribute("in");for(const b of document.querySelectorAll(a)){if(b.hasAttribute("if")&&(setStore(b,"if"),b.removeAttribute("if")),b.hasAttribute("css")&&(setStore(b,"css"),b.removeAttribute("css")),b.hasAttribute("bind")){let a="change",c=b.getAttribute("bind");(c.includes("value")||c.includes("checked"))&&Rem_parseAttr(c).forEach(c=>{"value"==c.prop&&(a="input"),b.addEventListener(a,()=>{Rem_Data[c.value]=b[c.prop]})}),setStore(b,"bind"),b.removeAttribute("bind")}b.hasAttribute("on")&&(Rem_parseAttr(b.getAttribute("on")).forEach(a=>{b.addEventListener(a.prop,function(){Rem_js(a.value)})}),b.removeAttribute("on"))}for(const a in Rem_Store)Rem_Update(a)});
